<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>000. Hello World - 用Github pages和Hexo搭建自己的个人主页</title>
    <url>/2022/02/24/000-hello-world/</url>
    <content><![CDATA[<p><strong>Hello world</strong><br>欢迎来到我的博客，我是Kennan，一名计算机专业的研究生。以前在不同的地方写一些文章博客，但会受到平台的各种限制和广告。<br>这里在前辈的指导下，通过 <a href="https://docs.github.com/en/pages">github pages平台</a> 和 <a href="https://hexo.io/">Hexo博客框架</a> 搭建了一个自己的个人主页，在上面分享一些自己的经历和学习心得。<br>下面记录一下我的搭建过程，请多多指教，一些相关文件可参考我的 <a href="https://github.com/KennanYang/KennanYang.github.io">KennanYang.github.io</a> 项目</p>
<span id="more"></span>
<h2 id="1-搭建Hexo"><a href="#1-搭建Hexo" class="headerlink" title="1.搭建Hexo"></a>1.搭建Hexo</h2><p><a href="https://hexo.io/">Hexo</a>是基于Node.js写的，也需要git管理文章上传到github，所以需要先安装git和nodeJS</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a><br>linux: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>使用<code>git --version</code>查看是否安装正确</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>windows：<a href="https://nodejs.org/en/">Node.js官网</a>选择LTS版本（稳定版）。</p>
<p>linux：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>
<p>使用<code>node -v</code>和<code>npm -v</code>查看是否安装正确</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>创建一个文件夹【filename】(我的叫 hexoblog)，然后<code>cd</code>到这个文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>用<code>hexo -v</code>查看一下版本</p>
<p>至此，安装完毕，开始配置Hexo项目</p>
<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>初始化Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init hexoblog</span><br><span class="line"><span class="built_in">cd</span> hexoblog //进入这个hexoblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>然后就可以查看官方的demo了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate //产生网页，可缩写hexo g</span><br><span class="line">hexo server //挂到本地服务器打开，可缩写hexo s</span><br></pre></td></tr></table></figure>

<p>在浏览器输入localhost:4000就可以看到你生成的博客，官方默认主题是landscope</p>
<h2 id="2-部署到github-pages"><a href="#2-部署到github-pages" class="headerlink" title="2.部署到github pages"></a>2.部署到github pages</h2><p>直接在github page平台上托管我们的博客，便于维护，下面是把Hexo搭好的博客部署到github pages的配置方式。</p>
<h3 id="注册github，新建repo"><a href="#注册github，新建repo" class="headerlink" title="注册github，新建repo"></a>注册github，新建repo</h3><p>新建一个自己用户名命名的仓库，后面加.github.io，像我这样，其他设置默认就好，点击create repository。<br><img src="https://img-blog.csdnimg.cn/c5bdfacd70c94789bcbe12c7a1c01da9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16" alt="创建repo"></p>
<h3 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h3><p>回到你的git bash中，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后创建SSH,一路回车</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src="https://img-blog.csdnimg.cn/1b4a2ce586c5423c91354dd38ecee893.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16" alt="ssh密钥"><br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br><img src="https://img-blog.csdnimg.cn/51f61bbe5dc64632be0158105eb15d3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_11,color_FFFFFF,t_70,g_se,x_5" alt="github-&gt;settings"></p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。<br><img src="https://img-blog.csdnimg.cn/b3cb64a9604946a38fc3f8bd85ce4f6a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>在gitbash中，查看是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h3 id="部署Hexo到github"><a href="#部署Hexo到github" class="headerlink" title="部署Hexo到github"></a>部署Hexo到github</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 是生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>
<p>注意deploy时可能要你输入username和password。</p>
<p>部署后需要<strong>等待一段时间</strong>，然后就可以在<code>http://yourname.github.io</code>看到Hexo 博客了，这里的内容和<code>hexo server</code>生成的内容完全相同。</p>
<h2 id="3-绑定个人域名"><a href="#3-绑定个人域名" class="headerlink" title="3.绑定个人域名"></a>3.绑定个人域名</h2><p>完成上面的步骤后，可以使用<code>http://yourname.github.io</code>查看个人主页，如何自定义一个属于自己的域名呢？</p>
<h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>注册一个<a href="https://www.aliyun.com/?spm=5176.100251.top-nav.dlogo.5af94f152mfbDz">阿里云账户</a>,在阿里云上买一个域名，我买的是<code>kennan-yang.top</code></p>
<p>先实名认证，然后在域名控制台添加解析，这里需要<strong>等半天时间</strong>。<br><img src="https://img-blog.csdnimg.cn/05356c75bdfa48d593e1789995afe188.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16" alt="域名解析"><br>登录GitHub，进入之前创建的仓库<code>yourname.github.io</code>，点击<code>settings-&gt;pages</code>，设置<code>Custom domain</code>，输入你的域名<code>kennan-yang.top</code> 并<code>save</code>。<br><img src="https://img-blog.csdnimg.cn/4ca6ad5c655b4eaab7f534ed8cc78ab7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiN6LSwS2VubmFu,size_20,color_FFFFFF,t_70,g_se,x_16" alt="Custom domain"></p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>然后在你的博客文件夹（如我的hexoblog）的<code>source</code>目录中创建一个名为<code>CNAME</code>文件，不要后缀。写上你的域名。<br><img src="https://img-blog.csdnimg.cn/e26efd4edb2a4772a54ded2542a28b14.png" alt="CNAME"><br>然后就是最常用的下面几条命令，当配置完成之后进行这些操作即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清理缓存</span></span><br><span class="line">hexo g <span class="comment"># hexo generate 生成静态页</span></span><br><span class="line">hexo s <span class="comment"># hexo server 本地预览（非必须）</span></span><br><span class="line">hexo d <span class="comment"># hexo deploy 部署到github pages</span></span><br></pre></td></tr></table></figure>
<p>部署完成后就可以用你的域名打开自己的博客啦！</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Hexo还有更多不同的主题和配置，可参考下面的资料进行个性化设置。</p>
<ol>
<li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">CSDN: hexo史上最全搭建教程</a></li>
<li><a href="https://docs.github.com/en/pages">github pages</a> </li>
<li><a href="https://hexo.io/">Hexo官方文档</a></li>
<li><a href="https://shen-yu.gitee.io/">Hexo的岛主题</a></li>
</ol>
]]></content>
      <categories>
        <category>搭建环境</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>搭建环境</tag>
      </tags>
  </entry>
  <entry>
    <title>004. 数据结构总结 —— 树</title>
    <url>/2022/03/02/004-tree-datatype/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><a href="http://c.biancheng.net/view/3390.html">《c语言学习网》数据结构总结——树</a><br>本文旨在根据教程巩固树的数据结构知识和c语言指针的应用，记录一下自己学习过程中的代码，知识讲解参考教程。</p>
<h2 id="一、树的基本概念和术语"><a href="#一、树的基本概念和术语" class="headerlink" title="一、树的基本概念和术语"></a>一、树的基本概念和术语</h2><p>树结构是一种非线性存储结构，存储的是具有“一对多”关系的数据元素的集合。如图 是使用树结构存储的集合 {A,B,C,D,E,F,G,H,I,J,K,L,M} 的示意图。对于数据 A 来说，和数据 B、C、D 有关系；对于数据 B 来说，和 E、F 有关系。这就是“一对多”的关系。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NDMwMTQ5My0wLnBuZw?x-oss-process=image/format,png" alt="图 1（A）树的示例"></p>
<h3 id="1-树的节点"><a href="#1-树的节点" class="headerlink" title="1.树的节点"></a>1.树的节点</h3><p>结点：使用树结构存储的每一个数据元素都被称为“结点”。例如，图 1（A）中，数据元素 A 就是一个结点；</p>
<p>父结点（双亲结点）、子结点和兄弟结点：对于图 1（A）中的结点 A、B、C、D 来说，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的子结点（也称“孩子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点。</p>
<p>树根结点（简称“根结点”）：每一个非空树都有且只有一个被称为根的结点。图 1（A）中，结点 A 就是整棵树的根结点。</p>
<blockquote>
<p>树根的判断依据为：如果一个结点没有父结点，那么这个结点就是整棵树的根结点。</p>
</blockquote>
<p>叶子结点：如果结点没有任何子结点，那么此结点称为叶子结点（叶结点）。例如图 1（A）中，结点 K、L、F、G、M、I、J 都是这棵树的叶子结点。</p>
<h3 id="2-子树和空树"><a href="#2-子树和空树" class="headerlink" title="2.子树和空树"></a>2.子树和空树</h3><p>子树：如图 1（A）中，整棵树的根结点为结点 A，而如果单看结点 B、E、F、K、L 组成的部分来说，也是棵树，而且节点 B 为这棵树的根结点。所以称 B、E、F、K、L 这几个结点组成的树为整棵树的子树；同样，结点 E、K、L 构成的也是一棵子树，根结点为 E。</p>
<blockquote>
<p>注意：单个结点也是一棵树，只不过根结点就是它本身。图 1（A）中，结点 K、L、F 等都是树，且都是整棵树的子树。</p>
</blockquote>
<p>知道了子树的概念后，树也可以这样定义：树是由根结点和若干棵子树构成的。</p>
<p>空树：如果集合本身为空，那么构成的树就被称为空树。空树中没有结点。</p>
<blockquote>
<p>补充：在树结构中，对于具有同一个根结点的各个子树，相互之间不能有交集。例如，图 1（A）中，除了根结点<br>A，其余元素又各自构成了三个子树，根结点分别为 B、C、D，这三个子树相互之间没有相同的结点。如果有，就破坏了树的结构，不能算做是一棵树。</p>
</blockquote>
<h3 id="3-结点的度和层次"><a href="#3-结点的度和层次" class="headerlink" title="3.结点的度和层次"></a>3.结点的度和层次</h3><p>对于一个结点，拥有的子树数（结点有多少分支）称为结点的度（Degree）。例如，图 1（A）中，根结点 A 下分出了 3 个子树，所以，结点 A 的度为 3。</p>
<blockquote>
<p>一棵树的度是树内各结点的度的最大值。图 1（A）表示的树中，各个结点的度的最大值为 3，所以，整棵树的度的值是 3。</p>
</blockquote>
<p>结点的层次：从一棵树的树根开始，树根所在层为第一层，根的孩子结点所在的层为第二层，依次类推。对于图 1（A）来说，A 结点在第一层，B、C、D 为第二层，E、F、G、H、I、J 在第三层，K、L、M 在第四层。</p>
<blockquote>
<p>一棵树的深度（高度）是树中结点所在的最大的层次。图 1（A）树的深度为 4。</p>
</blockquote>
<p>如果两个结点的父结点虽不相同，但是它们的父结点处在同一层次上，那么这两个结点互为堂兄弟。例如，图 1（A）中，结点 G 和 E、F、H、I、J 的父结点都在第二层，所以之间为堂兄弟的关系。</p>
<h3 id="4-有序树和无序树"><a href="#4-有序树和无序树" class="headerlink" title="4.有序树和无序树"></a>4.有序树和无序树</h3><p>如果树中结点的子树从左到右看，谁在左边，谁在右边，是有规定的，这棵树称为有序树；反之称为无序树。</p>
<blockquote>
<p>在有序树中，一个结点最左边的子树称为”第一个孩子”，最右边的称为”最后一个孩子”。</p>
</blockquote>
<p>拿图 1（A）来说，如果是其本身是一棵有序树，则以结点 B 为根结点的子树为整棵树的第一个孩子，以结点 D 为根结点的子树为整棵树的最后一个孩子。</p>
<h3 id="5-森林"><a href="#5-森林" class="headerlink" title="5.森林"></a>5.森林</h3><p>由 m（m &gt;= 0）个互不相交的树组成的集合被称为森林。图 1（A）中，分别以 B、C、D 为根结点的三棵子树就可以称为森林。</p>
<p>前面讲到，树可以理解为是由根结点和若干子树构成的，而这若干子树本身是一个森林，所以，树还可以理解为是由根结点和森林组成的。用一个式子表示为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Tree =（root,F）</span><br></pre></td></tr></table></figure>

<p>其中，root 表示树的根结点，F 表示由 m（m &gt;= 0）棵树组成的森林。</p>
<h2 id="二、二叉树及其性质"><a href="#二、二叉树及其性质" class="headerlink" title="二、二叉树及其性质"></a>二、二叉树及其性质</h2><p>简单地理解，满足以下两个条件的树就是二叉树：<br>1.本身是有序树；<br>2.树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；<br>例如，图 1 a) 就是一棵二叉树，而图 1 b) 则不是。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJMUjEtMC5naWY" alt="图 2 a)  二叉树"></p>
<h3 id="1-二叉树的性质"><a href="#1-二叉树的性质" class="headerlink" title="1.二叉树的性质"></a>1.二叉树的性质</h3><p>二叉树具有以下几个性质：<br>1.二叉树中，第 i 层最多有 2^i-1^ 个结点。<br>2.如果二叉树的深度为 K，那么此二叉树最多有 2^K^-1 个结点。<br>3.二叉树中，终端结点数（叶子结点数）为 n<del>0</del>，度为 2 的结点数为 n<del>2</del>，则 n<del>0</del>=n<del>2</del>+1。</p>
<blockquote>
<p>性质 3 的计算方法为：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点<br>n=n<del>0</del>+n<del>1</del>+n<del>2</del>。 同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数 n=B+1。而分枝数是可以通过<br>n<del>1</del> 和 n<del>2</del> 表示的，即 B=n<del>1</del>+2<em>n<del>2</del>。所以，n 用另外一种方式表示为 n=n<del>1</del>+2</em>n<del>2</del>+1。 两种方式得到的 n<br>值组成一个方程组，就可以得出 n<del>0</del>=n<del>2</del>+1。</p>
</blockquote>
<p>二叉树还可以继续分类，衍生出满二叉树和完全二叉树。</p>
<h3 id="2-满二叉树"><a href="#2-满二叉树" class="headerlink" title="2.满二叉树"></a>2.满二叉树</h3><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。</p>
<p>满二叉树示意图</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJIRzgtMS5naWY" alt="在这里插入图片描述"><br>图 2 满二叉树示意图</p>
<p>如图 2 所示就是一棵满二叉树。</p>
<p>满二叉树除了满足普通二叉树的性质，还具有以下性质：<br>满二叉树中第 i 层的节点数为 2^n-1^ 个。<br>深度为 k 的满二叉树必有 2^k-1^ 个节点 ，叶子数为 2^k-1^。<br>满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。<br>具有 n 个节点的满二叉树的深度为 log<del>2</del>(n+1)。</p>
<h3 id="3-完全二叉树"><a href="#3-完全二叉树" class="headerlink" title="3.完全二叉树"></a>3.完全二叉树</h3><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。</p>
<p>完全二叉树示意图</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NTJNYjUtMi5naWY" alt="在这里插入图片描述"><br>图 3 完全二叉树示意图</p>
<p>如图 3a) 所示是一棵完全二叉树，图 3b) 由于最后一层的节点没有按照从左向右分布，因此只能算作是普通的二叉树。</p>
<p>完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 ⌊log<del>2</del>n⌋+1。</p>
<blockquote>
<p>⌊log<del>2</del>n⌋ 表示取小于 log<del>2</del>n 的最大整数。例如，⌊log<del>2</del>4⌋ = 2，而 ⌊log<del>2</del>5⌋ 结果也是 2。</p>
</blockquote>
<p>对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号（如图 3a)），对于任意一个结点 i ，完全二叉树还有以下几个结论成立：<br>当 i&gt;1 时，父亲结点为结点 [i/2] 。（i=1 时，表示的是根结点，无父亲结点）<br>如果 2<em>i&gt;n（总结点的个数） ，则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2</em>i 。<br>如果 2<em>i+1&gt;n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2</em>i+1 。</p>
<h2 id="三、树的存储结构"><a href="#三、树的存储结构" class="headerlink" title="三、树的存储结构"></a>三、树的存储结构</h2><h3 id="1-二叉树的顺序存储"><a href="#1-二叉树的顺序存储" class="headerlink" title="1.二叉树的顺序存储"></a>1.二叉树的顺序存储</h3><p>二叉树的顺序存储，指的是使用顺序表（数组）存储二叉树。<strong>注：顺序存储只适用于完全二叉树。</strong></p>
<blockquote>
<p> 如果我们想顺序存储普通二叉树，需要提前将普通二叉树转化为完全二叉树。如下图所示：</p>
</blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0TTAyLTAucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<p>完全二叉树的顺序存储，仅需从根节点开始，按照层次依次将树中节点存储到数组即可。<br>比如上面的图2，存储结构如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0NjI0RjA0LTMucG5n?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>普通二叉树使用顺序表存储或多或多会存在空间浪费的现象，因此引入下面的链式存储。</p>
<h3 id="2-二叉树的链式存储"><a href="#2-二叉树的链式存储" class="headerlink" title="2.二叉树的链式存储"></a>2.二叉树的链式存储</h3><p>二叉树链式存储结构示意图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0oyWi0xLmdpZg" alt="在这里插入图片描述"><br>采用链式存储二叉树时，其节点结构由 3 部分构成（如图所示）：<br>指向左孩子节点的指针（Lchild）；<br>节点存储的数据（data）；<br>指向右孩子节点的指针（Rchild）；<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0R0swMzQtMi5naWY" alt="在这里插入图片描述"><br>数据结构为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">parent</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure>
<p>下面是一段完整的c语言代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELEMTYPE int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Struct of binary tree node</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">parent</span>;</span><span class="comment">//parent node pointer</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	create a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createTree</span><span class="params">(BiTree *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tree Graph:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:       1		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;        /\\		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2:     2  3		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;      /			\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3:   4			\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 1</span></span><br><span class="line">	*T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;data = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 2</span></span><br><span class="line">	(*T)-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;data = <span class="number">2</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;parent = *T;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;data = <span class="number">3</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;parent = *T;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 3</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class="number">4</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;parent = (*T)-&gt;lchild;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 4</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	createTree(&amp;tree);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Root is:%d\n&quot;</span>,tree-&gt;data);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Parent of the fourth node is:%d\n&quot;</span>, tree-&gt;lchild-&gt;lchild-&gt;parent-&gt;data);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>三叉链表</strong>：在某些实际场景中，可能会做 “查找某节点的父节点” 的操作，这时可以在节点结构中再添加一个指针域，用于各个节点指向其父亲节点。</p>
<h2 id="四、先序遍历"><a href="#四、先序遍历" class="headerlink" title="四、先序遍历"></a>四、先序遍历</h2><p>二叉树先序遍历的实现思想是：<br>1.访问根节点；<br>2.访问当前节点的左子树；<br>3.若当前节点无左子树，则访问当前节点的右子树；<br>如图所示二叉树：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<h3 id="递归方法："><a href="#递归方法：" class="headerlink" title="递归方法："></a>递归方法：</h3><p>二叉树的先序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Preorder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		Visit(T);</span><br><span class="line">		Preorder(T-&gt;lchild);</span><br><span class="line">		Preorder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归方法："><a href="#非递归方法：" class="headerlink" title="非递归方法："></a>非递归方法：</h3><p>而递归的底层实现依靠的是栈存储结构，因此，二叉树的先序遍历既可以直接采用递归思想实现，也可以使用栈的存储结构模拟递归的思想实现，思路如下：<br>1.对于每个节点判断是否有左右节点，<br>2.如果有左节点则继续访问左孩子节点，并判断其是否有右节点，如果有则入栈，没有则忽略。<br>3.如果当前节点没有左孩子节点，则继续判断栈是否有元素，如果有则回到栈节点继续访问右子树。如果没有则前序遍历完成。</p>
<p>其 C 语言实现代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELEMTYPE int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//Struct of binary tree node</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	create a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateTree</span><span class="params">(BiTree *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tree Graph:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:       1		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;        /\\		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2:     2  3		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;      /\\  /\\ 	\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3:   4 5  6 7	\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 1</span></span><br><span class="line">	*T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;data = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 2</span></span><br><span class="line">	(*T)-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;data = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;data = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 3</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 4</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	visit a node</span></span><br><span class="line"><span class="comment">*Input:		BiTNode</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Visit</span><span class="params">(BiTNode *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Preorder:%d\n&quot;</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	preorder visit a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Preorder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		Visit(T);</span><br><span class="line">		Preorder(T-&gt;lchild);</span><br><span class="line">		Preorder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	pop</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[]</span></span><br><span class="line"><span class="comment">*return		BiTNode*--The top element of stack.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BiTNode* <span class="title function_">pop</span><span class="params">(BiTNode* Stack[])</span> &#123;</span><br><span class="line">	BiTNode* a = Stack[top--];</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	push</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[], BiTNode*</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class="line">	Stack[++top] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	preorder visit a tree by using a stack</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreorderStack</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	BiTNode* Stack[MAXSIZE];<span class="comment">//Initialize the stack</span></span><br><span class="line">	<span class="keyword">while</span> (T) &#123;</span><br><span class="line">		Visit(T);</span><br><span class="line">		<span class="keyword">if</span> (T-&gt;lchild) &#123;<span class="comment">//If T has left child</span></span><br><span class="line">			<span class="keyword">if</span> (T-&gt;rchild) &#123;	<span class="comment">//If T has left and right child</span></span><br><span class="line">				push(Stack,T-&gt;rchild);</span><br><span class="line">			&#125;</span><br><span class="line">			T = T-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;rchild)&#123;<span class="comment">//If T only has right child</span></span><br><span class="line">			T = T-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(top&gt;=<span class="number">0</span>)&#123;<span class="comment">//If Stack has elements</span></span><br><span class="line">			BiTNode *a = pop(Stack);</span><br><span class="line">			T = a;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//If T is last node in preorder.</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	CreateTree(&amp;tree);</span><br><span class="line">	<span class="comment">//recursive</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Recursive PreOrder\n&quot;</span>);</span><br><span class="line">	Preorder(tree);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//not recursive</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Non-recursive PreOrder\n&quot;</span>);</span><br><span class="line">	PreorderStack(tree);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="五、中序遍历"><a href="#五、中序遍历" class="headerlink" title="五、中序遍历"></a>五、中序遍历</h2><p>二叉树中序遍历的实现思想是：<br>1.访问当前节点的左子树；<br>2.访问根节点；<br>3.访问当前节点的右子树；</p>
<p>如图所示二叉树：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>二叉树的中序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	InOrder visit a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		InOrder(T-&gt;lchild);</span><br><span class="line">		Visit(T);</span><br><span class="line">		InOrder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="非递归方法"><a href="#非递归方法" class="headerlink" title="非递归方法"></a>非递归方法</h3><p>我的思路如下：<br>访问根节点，判断其是否有左右孩子。<br>如果有左孩子，则根节点入栈，继续访问左子树。如果左子树为空，则访问出栈元素，然后访问其右子树。<br>如果没有左孩子，则判断是否有右孩子，并访问当前节点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELEMTYPE int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//Struct of binary tree node</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	create a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateTree</span><span class="params">(BiTree *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tree Graph:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:       1		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;        /\\		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2:     2  3		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;      /\\  /\\ 	\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3:   4 5  6 7	\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 1</span></span><br><span class="line">	*T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;data = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 2</span></span><br><span class="line">	(*T)-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;data = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;data = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 3</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 4</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	visit a node</span></span><br><span class="line"><span class="comment">*Input:		BiTNode</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Visit</span><span class="params">(BiTNode *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;InOrder:%d\n&quot;</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	InOrder visit a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		InOrder(T-&gt;lchild);</span><br><span class="line">		Visit(T);</span><br><span class="line">		InOrder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	pop</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[]</span></span><br><span class="line"><span class="comment">*return		BiTNode*--The top element of stack.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BiTNode* <span class="title function_">pop</span><span class="params">(BiTNode* Stack[])</span> &#123;</span><br><span class="line">	BiTNode* a = Stack[top--];</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	push</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[], BiTNode*</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class="line">	Stack[++top] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	InOrder visit a tree by using a stack</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrderStack</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	BiTNode* Stack[MAXSIZE];<span class="comment">//Initialize the stack</span></span><br><span class="line">	<span class="keyword">while</span> (T) &#123;</span><br><span class="line">		<span class="keyword">if</span> (T-&gt;lchild) &#123;<span class="comment">//If T has left child</span></span><br><span class="line">			push(Stack, T);</span><br><span class="line">			T = T-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			Visit(T);</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;rchild) &#123;<span class="comment">//If T has right child</span></span><br><span class="line">				T = T-&gt;rchild;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= <span class="number">0</span>) &#123;<span class="comment">//If Stack has elements</span></span><br><span class="line">				BiTNode *a = pop(Stack);</span><br><span class="line">				Visit(a);</span><br><span class="line">				T = a-&gt;rchild;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="comment">//If T is last node in preorder.</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	CreateTree(&amp;tree);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Recursive InOrder\n&quot;</span>);</span><br><span class="line">	<span class="comment">//recursive</span></span><br><span class="line">	InOrder(tree);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Non-recursive InOrder\n&quot;</span>);</span><br><span class="line">	<span class="comment">//not recursive</span></span><br><span class="line">	InOrderStack(tree);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种更标准的方法如下：<br>中序遍历的非递归方式实现思想是：从根结点开始，遍历左孩子同时压栈，当遍历结束，说明当前遍历的结点没有左孩子，从栈中取出来调用操作函数，然后访问该结点的右孩子，继续以上重复性的操作。</p>
<p>除此之外，还有另一种实现思想：中序遍历过程中，只需将每个结点的左子树压栈即可，右子树不需要压栈。当结点的左子树遍历完成后，只需要以栈顶结点的右孩子为根结点，继续循环遍历即可。</p>
<h2 id="六、后序遍历"><a href="#六、后序遍历" class="headerlink" title="六、后序遍历"></a>六、后序遍历</h2><p>二叉树中序遍历的实现思想是：<br>1.访问当前节点的左子树；<br>2.访问当前节点的右子树；<br>3.访问根节点；</p>
<p>如图所示二叉树：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<h3 id="递归方法-1"><a href="#递归方法-1" class="headerlink" title="递归方法"></a>递归方法</h3><p>二叉树的后序遍历采用的是递归的思想，因此可以递归实现，其 C 语言实现代码为（完整代码见非递归方法）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	Recursive method to traverse a tree in post-order</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(<span class="type">const</span> BiTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		PostOrder(T-&gt;lchild);</span><br><span class="line">		PostOrder(T-&gt;rchild);</span><br><span class="line">		Visit(T);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="非递归方法-1"><a href="#非递归方法-1" class="headerlink" title="非递归方法"></a>非递归方法</h3><p>非递归算法的思路是：<br>后序遍历的逆序 是 先序遍历交换左右子树遍历顺序。<br>因此用两个栈来实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELEMTYPE int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> top = <span class="number">-1</span>;   <span class="comment">//index of stack</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> printtop = <span class="number">-1</span>; <span class="comment">//index of printstack</span></span><br><span class="line"><span class="comment">//Struct of binary tree node</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	create a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateTree</span><span class="params">(BiTree *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tree Graph:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:       1		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;        /\\		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2:     2  3		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;      /\\  /\\ 	\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3:   4 5  6 7	\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 1</span></span><br><span class="line">	*T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;data = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 2</span></span><br><span class="line">	(*T)-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;data = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;data = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 3</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 4</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	visit a node</span></span><br><span class="line"><span class="comment">*Input:		BiTNode</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Visit</span><span class="params">(BiTNode *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PostOrder:%d\n&quot;</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	Recursive method to traverse a tree in post-order</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(<span class="type">const</span> BiTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		PostOrder(T-&gt;lchild);</span><br><span class="line">		PostOrder(T-&gt;rchild);</span><br><span class="line">		Visit(T);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	pop</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[]</span></span><br><span class="line"><span class="comment">*return		BiTNode*--The top element of stack.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BiTNode* <span class="title function_">pop</span><span class="params">(BiTNode* Stack[])</span> &#123;</span><br><span class="line">	BiTNode* a = Stack[top--];</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	push</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[], BiTNode*</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class="line">	Stack[++top] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	printpop for printstack</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[]</span></span><br><span class="line"><span class="comment">*return		BiTNode*--The top element of stack.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BiTNode* <span class="title function_">printpop</span><span class="params">(BiTNode* Stack[])</span> &#123;</span><br><span class="line">	BiTNode* a = Stack[printtop--];</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	printpush for printstack</span></span><br><span class="line"><span class="comment">*Input:		BiTNode*[], BiTNode*</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printpush</span><span class="params">(BiTNode* Stack[], BiTNode* a)</span> &#123;</span><br><span class="line">	Stack[++printtop] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	PostOrder visit a tree by using two stacks</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrderStack</span><span class="params">(BiTree T)</span> &#123;</span><br><span class="line">	BiTNode* Stack[MAXSIZE];<span class="comment">//Initialize the stack</span></span><br><span class="line">	BiTNode* PrintStack[MAXSIZE];<span class="comment">//Initialize the stack</span></span><br><span class="line">	<span class="keyword">while</span> (T) &#123;</span><br><span class="line">		printpush(PrintStack, T);</span><br><span class="line">		<span class="keyword">if</span> (T-&gt;rchild) &#123;<span class="comment">//If T has left child</span></span><br><span class="line">			<span class="keyword">if</span> (T-&gt;lchild) &#123;	<span class="comment">//If T has left and right child</span></span><br><span class="line">				push(Stack, T-&gt;lchild);</span><br><span class="line">			&#125;</span><br><span class="line">			T = T-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (T-&gt;lchild) &#123;<span class="comment">//If T only has right child</span></span><br><span class="line">			T = T-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= <span class="number">0</span>) &#123;<span class="comment">//If Stack has elements</span></span><br><span class="line">			BiTNode *a = pop(Stack);</span><br><span class="line">			T = a;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//If T is last node in preorder.</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (printtop &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">		Visit(printpop(PrintStack));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	CreateTree(&amp;tree);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Recursive method\n&quot;</span>);</span><br><span class="line">	<span class="comment">//Recursive method to traverse a tree in post-order</span></span><br><span class="line">	PostOrder(tree);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Non-recursive method\n&quot;</span>);</span><br><span class="line">	<span class="comment">//Non-recursive method to traverse a tree in post-order</span></span><br><span class="line">	PostOrderStack(tree);</span><br><span class="line">	getchar();</span><br><span class="line">	delete tree;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一种算法思路：<br>用一个栈，但是设置标志位。<br>后序遍历是在遍历完当前结点的左右孩子之后，才调用操作函数，所以需要在操作结点进栈时，为每个结点配备一个标志位。当遍历该结点的左孩子时，设置当前结点的标志位为 0，进栈；当要遍历该结点的右孩子时，设置当前结点的标志位为 1，进栈。</p>
<p>这样，当遍历完成，该结点弹栈时，查看该结点的标志位的值：如果是 0，表示该结点的右孩子还没有遍历；反之如果是 1，说明该结点的左右孩子都遍历完成，可以调用操作函数。<br><a href="http://c.biancheng.net/view/3390.html">代码实现</a></p>
<h2 id="七、层次遍历"><a href="#七、层次遍历" class="headerlink" title="七、层次遍历"></a>七、层次遍历</h2><p>按照二叉树中的层次从左到右依次遍历每层中的结点。<br>具体的实现思路是：通过使用队列的数据结构，从树的根结点开始，依次将其左孩子和右孩子入队。而后每次队列中一个结点出队，都将其左孩子和右孩子入队，直到树中所有结点都出队，出队结点的先后顺序就是层次遍历的最终结果。</p>
<p>如图1所示二叉树：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk0VDY0NEItMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>例如，层次遍历图 1 中的二叉树：<br>首先，根结点 1 入队；<br>根结点 1 出队，出队的同时，将左孩子 2 和右孩子 3 分别入队；<br>队头结点 2 出队，出队的同时，将结点 2 的左孩子 4 和右孩子 5 依次入队；<br>队头结点 3 出队，出队的同时，将结点 3 的左孩子 6 和右孩子 7 依次入队；<br>不断地循环，直至队列内为空。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELEMTYPE int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//Struct of binary tree node</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	create a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateTree</span><span class="params">(BiTree *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tree Graph:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:       1		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;        /\\		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2:     2  3		\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;      /\\  /\\ 	\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3:   4 5  6 7	\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 1</span></span><br><span class="line">	*T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;data = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 2</span></span><br><span class="line">	(*T)-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;data = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;data = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 3</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;data = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;data = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;data = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;data = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Depth: 4</span></span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;lchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;lchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	(*T)-&gt;rchild-&gt;rchild-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	visit a node</span></span><br><span class="line"><span class="comment">*Input:		BiTNode</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Visit</span><span class="params">(BiTNode *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hierarchical traversal:%d\n&quot;</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(BiTNode * <span class="built_in">queue</span>[],BiTNode * a)</span> &#123;</span><br><span class="line">	<span class="built_in">queue</span>[rear++] = a;</span><br><span class="line">&#125;</span><br><span class="line">BiTNode * <span class="title function_">DeQueue</span><span class="params">(BiTNode * <span class="built_in">queue</span>[])</span> &#123;</span><br><span class="line">	BiTNode *b = <span class="built_in">queue</span>[front++];</span><br><span class="line">	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	Hierarchical traversal</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Hierarchical</span><span class="params">(<span class="type">const</span> BiTree T)</span> &#123;</span><br><span class="line">	BiTNode* Queue[MAXSIZE];</span><br><span class="line">	BiTree q = T;</span><br><span class="line">	EnQueue(Queue,q);</span><br><span class="line">	<span class="keyword">while</span> (front&lt;rear) &#123;</span><br><span class="line">		BiTNode* node = DeQueue(Queue);</span><br><span class="line">		Visit(node);</span><br><span class="line">		<span class="keyword">if</span> (node-&gt;lchild!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">			EnQueue(Queue, node-&gt;lchild);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (node-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			EnQueue(Queue, node-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	BiTree tree;</span><br><span class="line">	CreateTree(&amp;tree);</span><br><span class="line">	<span class="comment">//Hierarchical traversal</span></span><br><span class="line">	Hierarchical(tree);</span><br><span class="line">	getchar();</span><br><span class="line">	delete tree;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、哈夫曼树"><a href="#八、哈夫曼树" class="headerlink" title="八、哈夫曼树"></a>八、哈夫曼树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。图 1 中，从根结点到结点 a 之间的通路就是一条路径。</p>
<p>路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。图 1 中从根结点到结点 c 的路径长度为 3。</p>
<p>结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。例如，图 1 中结点 a 的权为 7，结点 b 的权为 5。</p>
<p>结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。例如，图 1 中结点 b 的带权路径长度为 2 * 5 = 10 </p>
<p><img src="https://img-blog.csdn.net/20131205224108125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3RmbW9ua2luZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="在这里插入图片描述"></p>
<p>哈夫曼树：又称最优二叉树。它是 n 个带权叶子结点构成的所有二叉树中，带权路径长度 WPL 最小的二叉树。<br>如下图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNUYjAtMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>对于给定的有各自权值的 n 个结点，构建哈夫曼树有一个行之有效的办法：<br>在 n 个权值中选出两个最小的权值，对应的两个结点组成一个新的二叉树，且新二叉树的根结点的权值为左右孩子权值的和；<br>在原有的 n 个权值中删除那两个最小的权值，同时将新的权值加入到 n–2 个权值的行列中，以此类推；<br>重复 1 和 2 ，直到所以的结点构建成了一棵二叉树为止，这棵树就是哈夫曼树。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2MuYmlhbmNoZW5nLm5ldC91cGxvYWRzL2FsbGltZy8xOTA0MjcvMDk1NjNRUzUtMS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>
<h3 id="哈弗曼树中结点结构"><a href="#哈弗曼树中结点结构" class="headerlink" title="哈弗曼树中结点结构"></a>哈弗曼树中结点结构</h3><p>构建哈夫曼树时，首先需要确定树中结点的构成。由于哈夫曼树的构建是从叶子结点开始，不断地构建新的父结点，直至树根，所以结点中应包含指向父结点的指针。但是在使用哈夫曼树时是从树根开始，根据需求遍历树中的结点，因此每个结点需要有指向其左孩子和右孩子的指针。</p>
<p>所以，哈夫曼树中结点构成用代码表示为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Struct of huffman tree</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">left</span>, *<span class="title">right</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">parent</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">&#125;BTNode, *HFTree;</span><br></pre></td></tr></table></figure>
<h3 id="构建哈弗曼树的算法实现及WPL的计算"><a href="#构建哈弗曼树的算法实现及WPL的计算" class="headerlink" title="构建哈弗曼树的算法实现及WPL的计算"></a>构建哈弗曼树的算法实现及WPL的计算</h3><p>构建哈夫曼树时，需要每次根据各个结点的权重值，筛选出其中值最小的两个结点，然后构建二叉树。</p>
<p>大佬的思路：查找权重值最小的两个结点的思想是：从树组起始位置开始，首先找到两个无父结点的结点（说明还未使用其构建成树），然后和后续无父结点的结点依次做比较，有两种情况需要考虑：<br>如果比两个结点中较小的那个还小，就保留这个结点，删除原来较大的结点；<br>如果介于两个结点权重值之间，替换原来较大的结点；<br>参考：<a href="https://blog.csdn.net/wtfmonking/article/details/17150499">哈夫曼树c语言实现</a><br>我的思路：<br>建立一个哈夫曼树：<br>创建工作指针p+tmp，<br>对于一组数，依次找出最小的数加入树中(选择排序思想)，<br>如果树没有创建，则创建一个结点存入第一个数。工作指针指向这个结点<br>如果工作指针没有左孩子，则工作指针左孩子指向下一个结点<br>如果工作指针没有右孩子，则工作指针右孩子指向下一个结点<br>如果工作指针有两个孩子，则创建一个空结点，左孩子指向工作指针，右孩子指向下一个结点，并将工作指针指向该结点。<br>计算wpl:<br>递归计算，<br>如果结点没有左右孩子则为叶子结点，返回权值*高度.<br>如果有孩子，则返回左子树wpl和右子树wpl之和.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELEMTYPE int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> top = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//Struct of huffman tree</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> &#123;</span></span><br><span class="line">	ELEMTYPE data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">left</span>, *<span class="title">right</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">parent</span>;</span><span class="comment">//child node pointer</span></span><br><span class="line">&#125;BTNode, *HFTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	create a huffman tree</span></span><br><span class="line"><span class="comment">*Input:		int *nums--numbers to create tree,int n--num[] size</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HFTree <span class="title function_">CreateTree</span><span class="params">(<span class="type">int</span> *nums,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">	BTNode *p_tmp =(BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode)); <span class="comment">//work pointer</span></span><br><span class="line">	p_tmp-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	p_tmp-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	p_tmp-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> lastnum = <span class="number">0</span>;<span class="comment">//Initilize with a num less than the min num</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> min = <span class="number">100</span>;<span class="comment">//Initilize with a num larger than the max num</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (min&gt;nums[j] &amp;&amp; lastnum&lt;nums[j]) &#123;</span><br><span class="line">				min = nums[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		lastnum = min;</span><br><span class="line">		<span class="comment">//create a new node</span></span><br><span class="line">		BTNode *p_newchild= (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">		p_newchild-&gt;data = min;</span><br><span class="line">		p_newchild-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">		p_newchild-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">		p_newchild-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">1</span> == n) &#123;</span><br><span class="line">			<span class="keyword">return</span> p_newchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (p_tmp-&gt;left==<span class="literal">NULL</span>) &#123; <span class="comment">//add node to left of p_tmp</span></span><br><span class="line">			p_tmp-&gt;left = p_newchild;</span><br><span class="line">			p_newchild-&gt;parent = p_tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(p_tmp-&gt;right == <span class="literal">NULL</span>)&#123;<span class="comment">//add node to right of p_tmp</span></span><br><span class="line">			p_tmp-&gt;right = p_newchild;</span><br><span class="line">			p_tmp-&gt;data = p_tmp-&gt;left-&gt;data + p_tmp-&gt;right-&gt;data;</span><br><span class="line">			p_newchild-&gt;parent =p_tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//add brother node of p_tmp and create p_newparent</span></span><br><span class="line">			BTNode *p_newparent = (BTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">			p_newparent-&gt;data = p_tmp-&gt;data+min;</span><br><span class="line">			<span class="keyword">if</span> (p_tmp-&gt;data&lt;=min) &#123;</span><br><span class="line">				p_newparent-&gt;left = p_tmp;</span><br><span class="line">				p_newparent-&gt;right = p_newchild;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				p_newparent-&gt;left = p_newchild;</span><br><span class="line">				p_newparent-&gt;right = p_tmp;</span><br><span class="line">			&#125;</span><br><span class="line">			p_newparent-&gt;parent = <span class="literal">NULL</span>;</span><br><span class="line">			p_newchild-&gt;parent = p_newparent;</span><br><span class="line">			p_tmp = p_newparent;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p_tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	visit a node</span></span><br><span class="line"><span class="comment">*Input:		BiTNode</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Visit</span><span class="params">(BTNode *T)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;PreOrder:%d\n&quot;</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	PreOrder visit a tree</span></span><br><span class="line"><span class="comment">*Input:		Bitree</span></span><br><span class="line"><span class="comment">*return</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(HFTree T)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		Visit(T);</span><br><span class="line">		PreOrder(T-&gt;left);</span><br><span class="line">		PreOrder(T-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*Function:	calculate the weight path length of HFTree</span></span><br><span class="line"><span class="comment">*Input:		HFTree T, int len--depth</span></span><br><span class="line"><span class="comment">*return		wpl</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal_wpl</span><span class="params">(HFTree T, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (T) &#123;</span><br><span class="line">		<span class="comment">//If leaf node</span></span><br><span class="line">		<span class="keyword">if</span> (T-&gt;left==<span class="literal">NULL</span> &amp;&amp; T-&gt;right==<span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> T-&gt;data*len;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//If not leaf node, return left child tree wpl and right child tree wpl</span></span><br><span class="line">			<span class="keyword">return</span> cal_wpl(T-&gt;left,len+<span class="number">1</span>) + cal_wpl(T-&gt;left,len+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//Null tree return 0;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> nums[<span class="number">5</span>] = &#123;<span class="number">9</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">18</span>&#125;;</span><br><span class="line">	HFTree tree=CreateTree(nums,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//recursive visit tree node</span></span><br><span class="line">	PreOrder(tree);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cal_wpl(tree,<span class="number">0</span>));</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>003. go入门，学习用goroutine开启并发</title>
    <url>/2022/03/02/003-goroutine/</url>
    <content><![CDATA[<p><strong>为了学习go语言，和了解并行的基本写法，这里通过一个demo练习</strong><br>由于已经有了c++和python的基础，所以了解基本语法很快，主要是学习go面向消息的传递机制，以及使用goroutine进行并发操作。<br>参考资料：<br><a href="https://www.runoob.com/go/go-concurrent.html">Go 语言教程-Go并发</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>hello.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*一个go的并行计算demo,学习go的基本语法，并计算两个数组元素值为1的数目*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包声明：必须在源文件中非注释的第一行指明这个文件属于哪个包</span></span><br><span class="line"><span class="comment">//每个Go程序都包含一个名为main的包</span></span><br><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="comment">//import告诉Go编译器使用&quot;fmt&quot;包里的元素</span></span><br><span class="line"><span class="comment">//fmt包实现了格式化IO函数</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">函数声明方式</span></span><br><span class="line"><span class="comment">func function_name([parameter list])[return_types]&#123;</span></span><br><span class="line"><span class="comment">    函数体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(arr []<span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    变量声明的两种方式：</span></span><br><span class="line"><span class="comment">    1.var v_name v_type = value</span></span><br><span class="line"><span class="comment">    2.v_name := value 根据值自行判定变量类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注：标识符首字母大写，如Group 1，则可被外部包调用，称为导出。以小写字母开头则只能内部可见。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    循环定义方式 </span></span><br><span class="line"><span class="comment">    1.for init; condition； post&#123;&#125;</span></span><br><span class="line"><span class="comment">    2.for condition&#123;&#125;</span></span><br><span class="line"><span class="comment">    3.for key, value := range iter&#123;&#125;  用range对slice、map、数组等迭代循环</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        条件语句</span></span><br><span class="line"><span class="comment">        if 布尔表达式&#123;</span></span><br><span class="line"><span class="comment">            //语句</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> value == <span class="number">1</span>&#123;</span><br><span class="line">            <span class="comment">//运算符同c++，包括++，--</span></span><br><span class="line">            sum++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//值保存到通道（channel）方便并行</span></span><br><span class="line">    c &lt;- sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数是程序开始执行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="comment">//字符串输出到控制台，并结尾增加换行符&#x27;\n&#x27;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建数组方式一: var variable_name = [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class="line">    <span class="keyword">var</span> arr_a =[]<span class="type">int</span>  &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">// 创建数组方式二: variable_name := [SIZE] variable_type&#123;,,,...&#125;</span></span><br><span class="line">    arr_b := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    函数调用方式: func([parameter_list])</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    goroutine: 轻量级线程，支持并发</span></span><br><span class="line"><span class="comment">    如果用goroutine调度，则前加go关键字，如go f(x,y,z)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">go</span> sum(arr_a, ch)</span><br><span class="line">    <span class="keyword">go</span> sum(arr_b, ch)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通道（channel）可用于两个goroutine之间通过传递一个指定的值来同步运行和通讯。</span></span><br><span class="line"><span class="comment">    操作符&lt;-用于指定通道的方向，发送或接收。如：</span></span><br><span class="line"><span class="comment">    ch &lt;- v //把v发送到通道ch</span></span><br><span class="line"><span class="comment">    v := &lt;- ch //从ch接收数据，并把值赋给v</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    result_a, result_b := &lt;- ch, &lt;- ch</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出计算结果</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;results&quot;</span>, result_a, result_b, result_a + result_b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p><img src="/images/helloworld.png" alt="输出结果"></p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>002. win10安装python3.9.1+cuda11.1+cudnn+pytorch+opencv记录</title>
    <url>/2022/02/24/002-config-pytorch/</url>
    <content><![CDATA[<p>最近由于机器学习大作业需要用到神经网络，记录一下配置环境的过程。<br>前人铺路，我只是结合自己的环境做了一个简单的总结，写的不好多多见谅。</p>
<span id="more"></span>
<h1 id="1-安装python3-9"><a href="#1-安装python3-9" class="headerlink" title="1.安装python3.9"></a>1.安装python3.9</h1><p>首先是python的安装，选用当前时间最新版的python3.9.1<br>官网下载安装包即可<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a><br><img src="https://img-blog.csdnimg.cn/20201219134620158.png"></p>
<p>一路“下一步”，建议安装到默认路径。</p>
<p>然后，配置环境变量：<br>找到安装的位置，把图中所示的两个路径加入环境变量。<br>我的路径是：<br>C:\Users\Administrator\AppData\Local\Programs\Python\Python39<br>C:\Users\Administrator\AppData\Local\Programs\Python\Python39\Scripts<br><img src="https://img-blog.csdnimg.cn/20201219134237283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"><br>补充一点：<br>conda里python中的pytorch比较老，遇到没法调用的问题（这里没有深究），所以没有用anaconda，而是直接官网找最新的python。</p>
<h1 id="2-安装cuda（需要vs环境，我的是vs2015）"><a href="#2-安装cuda（需要vs环境，我的是vs2015）" class="headerlink" title="2.安装cuda（需要vs环境，我的是vs2015）"></a>2.安装cuda（需要vs环境，我的是vs2015）</h1><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。</p>
<p>我当前的环境是vs2015，电脑配置是</p>
<p><img src="https://img-blog.csdnimg.cn/20201219142426303.png"><br><img src="https://img-blog.csdnimg.cn/20201219142440290.png"><br>注意CUDA的版本不能超过GPU的版本。</p>
<p>官网的CUDA安装路径如下：<br><a href="https://developer.nvidia.com/zh-cn/cuda-downloads">https://developer.nvidia.com/zh-cn/cuda-downloads</a><br><img src="https://img-blog.csdnimg.cn/20201219142239715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"><br>圈出来的部分，前者是一个比较大的安装包，下载到本地安装，后者是很小的安装包，但是需要联网，我选的前者。<br><img src="https://img-blog.csdnimg.cn/20201219142349445.png"></p>
<p>仍然选择当前最新的版本11.1，安装到默认路径下：<br>C:\Program Files\NVIDIA GPU Computing Toolkit</p>
<h1 id="3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）"><a href="#3-安装cudnn（版本和cuda对应，更老的版本也可以但不建议）" class="headerlink" title="3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）"></a>3.安装cudnn（版本和cuda对应，更老的版本也可以但不建议）</h1><p>NVIDIA cuDNN是用于深度神经网络的GPU加速库。<br>老规矩，走官网。<br><a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a><br><img src="https://img-blog.csdnimg.cn/20201219140906756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"></p>
<p>这里的下载需要注册，有个技巧是复制链接，在迅雷打开可以直接下载。<br><img src="https://img-blog.csdnimg.cn/20201219135916291.png"></p>
<p>下载好的压缩包解压之后，会发现三个文件夹。<br>分别把文件放到cuda路径对应的文件夹下。<br><img src="https://img-blog.csdnimg.cn/20201219135443329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"></p>
<h1 id="4-安装pytorch"><a href="#4-安装pytorch" class="headerlink" title="4.安装pytorch"></a>4.安装pytorch</h1><p>它是一个基于Python的可续计算包，提供两个高级功能：1、具有强大的GPU加速的张量计算（如NumPy）。2、包含自动求导系统的深度神经网络。<br>官网：<br><a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a><br><img src="https://img-blog.csdnimg.cn/20201219140414305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"><br>可以通过pip安装，最下面的命令行在cmd中打开即可。<br>由于速度慢，所以直接从别人那里拷贝过来了。</p>
<p>可以在python中通过下面的代码来检验，True表示pytorch的cuda配置成功<br><img src="https://img-blog.csdnimg.cn/20201219142901202.png"></p>
<h1 id="5-安装opencv"><a href="#5-安装opencv" class="headerlink" title="5.安装opencv"></a>5.安装opencv</h1><p>方法一：<br>打开cmd，输入<code>pip install opencv-python</code>即可，但超级慢还可能断开连接。<br>此处建议清华镜像下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>

<p>方法二：<br>下载相应Python版本的OpenCV的whl文件<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv">https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv</a><br>然后打开cmd，在whl文件对应文件夹路径下，使用pip安装，如<br><img src="https://img-blog.csdnimg.cn/20201219141255475.png"></p>
<h2 id="至此我需要的环境已经配置完成。"><a href="#至此我需要的环境已经配置完成。" class="headerlink" title="至此我需要的环境已经配置完成。"></a>至此我需要的环境已经配置完成。</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>001. 如何连接实验室的服务器进行网络训练？</title>
    <url>/2022/02/24/001-link-to-server/</url>
    <content><![CDATA[<p>我在用电脑训练CNN时遇到了性能瓶颈（显存不够），当得知实验室的服务器算力更强时，去请教师兄怎么连。</p>
<p>实验室的师兄甩过来服务器的ip和用户名密码，说直接连就行。</p>
<p>直接连？linux都不太会用的小白，咋连？</p>
<p>首先确保连接到实验室的网络，我这边是用校园网或者挂校园网的VPN，然后有下面几种配置方法（方法应该很多，只是列出了我尝试过的这三种）：</p>
<span id="more"></span>
<h1 id="方法一：wsl（Windows-Subsystem-for-Linux）"><a href="#方法一：wsl（Windows-Subsystem-for-Linux）" class="headerlink" title="方法一：wsl（Windows Subsystem for Linux）"></a>方法一：wsl（Windows Subsystem for Linux）</h1><p>1.下载wsl2<br>参考<br><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></p>
<p>2.下载windows终端windows terminal（非必须，也可直接用power shell）<br><a href="https://docs.microsoft.com/zh-cn/windows/terminal/get-started">https://docs.microsoft.com/zh-cn/windows/terminal/get-started</a></p>
<p>3.使用ssh命令进行外部链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-&gt; ssh 用户@ip</span><br><span class="line">-&gt; 密码</span><br></pre></td></tr></table></figure>

<h1 id="方法二：vscode"><a href="#方法二：vscode" class="headerlink" title="方法二：vscode"></a>方法二：vscode</h1><p>1.vscode下载remote-ssh和remote wsl<br><img src="https://img-blog.csdnimg.cn/20210519110928571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"></p>
<p>2.连接服务器</p>
<p>选择左下角的标志<br><img src="https://img-blog.csdnimg.cn/20210519111221622.png"><br>会弹出一个菜单栏，选择Connect to Host…，输入用户名和密码即可<br><img src="https://img-blog.csdnimg.cn/20210519111159132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODA1NTk3,size_16,color_FFFFFF,t_70"></p>
<h1 id="方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版"><a href="#方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版" class="headerlink" title="方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版"></a>方法三（推荐）：使用终端模拟器XShell和XFtp，学校和家庭有免费版</h1><p><a href="https://www.netsarang.com/zh/free-for-home-school/">https://www.netsarang.com/zh/free-for-home-school/</a><br><img src="https://img-blog.csdnimg.cn/2021051911143257.png"></p>
<p>XShell用来输入指令</p>
<p>XFtp方便文件管理和传输</p>
<p>当连接完成之后，就可以把使用GPU的网络训练代码放在服务器上跑了。。</p>
]]></content>
      <categories>
        <category>搭建环境</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
